import { X, Download, FileText, Globe, Table } from 'lucide-react';
import { Building, Statistics } from '../types';

interface ExportModalProps {
  buildings: Building[];
  statistics: Statistics;
  onClose: () => void;
}

export default function ExportModal({ buildings, statistics, onClose }: ExportModalProps) {
  const handleExportCSV = () => {
    const headers = [
      'ID',
      'Type',
      'Area (m²)',
      'Confidence (%)',
      'Estimated Value (₦)',
      'Longitude',
      'Latitude',
      'Detected At',
    ];

    const rows = buildings.map(building => {
      const coords = building.geometry.coordinates[0][0];
      return [
        building.id,
        building.properties.classification,
        building.properties.area_in_meters.toFixed(2),
        building.properties.confidence,
        building.properties.estimatedValue?.toFixed(2) || '0',
        coords[0].toFixed(6),
        coords[1].toFixed(6),
        building.properties.detectedAt || '',
      ];
    });

    const csv = [
      headers.join(','),
      ...rows.map(row => row.join(','))
    ].join('\n');

    downloadFile(csv, `fastfind360-export-${new Date().toISOString().split('T')[0]}.csv`, 'text/csv');
    onClose();
  };

  const handleExportGeoJSON = () => {
    const geojson = {
      type: 'FeatureCollection',
      features: buildings.map(building => ({
        type: 'Feature',
        geometry: building.geometry,
        properties: {
          ...building.properties,
          id: building.id,
        },
      })),
    };

    downloadFile(
      JSON.stringify(geojson, null, 2),
      `fastfind360-export-${new Date().toISOString().split('T')[0]}.geojson`,
      'application/geo+json'
    );
    onClose();
  };

  const handleExportReport = () => {
    const report = `
FASTFIND360 PROPERTY INTELLIGENCE REPORT
Generated: ${new Date().toLocaleString()}
Location: Gombe State, Nigeria

========================================
EXECUTIVE SUMMARY
========================================

Total Buildings Detected: ${statistics.totalBuildings.toLocaleString()}
Total Area Covered: ${statistics.totalArea.toFixed(2)} km²
Detection Accuracy: ${statistics.detectionAccuracy}%
Potential Revenue: ₦${statistics.potentialRevenue.toFixed(1)}B

========================================
CLASSIFICATION BREAKDOWN
========================================

Residential: ${statistics.classifications.residential.toLocaleString()} buildings
Commercial: ${statistics.classifications.commercial.toLocaleString()} buildings
Industrial: ${statistics.classifications.industrial.toLocaleString()} buildings
Institutional: ${statistics.classifications.institutional.toLocaleString()} buildings
Mixed Use: ${statistics.classifications.mixed.toLocaleString()} buildings

========================================
SAMPLE PROPERTIES (First 100)
========================================

${buildings.slice(0, 100).map((b, i) => {
  const coords = b.geometry.coordinates[0][0];
  return `
${i + 1}. ${b.id}
   Type: ${b.properties.classification}
   Area: ${b.properties.area_in_meters.toFixed(2)} m²
   Location: ${coords[1].toFixed(6)}°N, ${coords[0].toFixed(6)}°E
   Confidence: ${b.properties.confidence}%
`;
}).join('\n')}

========================================
METHODOLOGY
========================================

Data Source: Google Open Buildings Dataset
Detection Method: Satellite Imagery Analysis with AI
Coverage: Gombe State, Nigeria
Last Updated: October 2025

For full dataset, please refer to the CSV or GeoJSON exports.

Report Generated by FastFind360 - Africa's First AI-Native Property Detection System
Powered by NIGCOMSAT
    `.trim();

    downloadFile(report, `fastfind360-report-${new Date().toISOString().split('T')[0]}.txt`, 'text/plain');
    onClose();
  };

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl max-w-md w-full">
        {/* Header */}
        <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Download className="w-5 h-5 text-blue-600" />
            <h2 className="text-lg font-bold text-gray-900">Export Data</h2>
          </div>
          <button
            onClick={onClose}
            className="w-8 h-8 flex items-center justify-center rounded-lg hover:bg-gray-100 transition-colors"
          >
            <X className="w-5 h-5 text-gray-600" />
          </button>
        </div>
        
        {/* Content */}
        <div className="p-6 space-y-3">
          <p className="text-sm text-gray-600 mb-4">
            Export {buildings.length.toLocaleString()} buildings in your preferred format
          </p>
          
          {/* CSV Export */}
          <button
            onClick={handleExportCSV}
            className="w-full flex items-center justify-between p-4 border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all group"
          >
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center group-hover:bg-green-200 transition-colors">
                <Table className="w-6 h-6 text-green-600" />
              </div>
              <div className="text-left">
                <div className="font-semibold text-gray-900">CSV Format</div>
                <div className="text-xs text-gray-600">For Excel/Spreadsheets</div>
              </div>
            </div>
            <Download className="w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors" />
          </button>
          
          {/* GeoJSON Export */}
          <button
            onClick={handleExportGeoJSON}
            className="w-full flex items-center justify-between p-4 border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all group"
          >
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center group-hover:bg-purple-200 transition-colors">
                <Globe className="w-6 h-6 text-purple-600" />
              </div>
              <div className="text-left">
                <div className="font-semibold text-gray-900">GeoJSON Format</div>
                <div className="text-xs text-gray-600">For GIS Software</div>
              </div>
            </div>
            <Download className="w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors" />
          </button>
          
          {/* PDF Report */}
          <button
            onClick={handleExportReport}
            className="w-full flex items-center justify-between p-4 border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all group"
          >
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center group-hover:bg-red-200 transition-colors">
                <FileText className="w-6 h-6 text-red-600" />
              </div>
              <div className="text-left">
                <div className="font-semibold text-gray-900">Text Report</div>
                <div className="text-xs text-gray-600">Executive Summary</div>
              </div>
            </div>
            <Download className="w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors" />
          </button>
        </div>
        
        {/* Footer */}
        <div className="px-6 py-4 border-t border-gray-200 bg-gray-50 rounded-b-xl">
          <p className="text-xs text-gray-600 text-center">
            All exports include property classification, coordinates, and metadata
          </p>
        </div>
      </div>
    </div>
  );
}
